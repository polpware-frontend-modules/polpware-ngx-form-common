{"version":3,"file":"polpware-ngx-form-common.umd.js","sources":["ng://@polpware/ngx-form-common/lib/interfaces/has-alert-info.interface.ts","ng://@polpware/ngx-form-common/lib/interfaces/has-submission-state.interface.ts","ng://@polpware/ngx-form-common/lib/bases/default-form-base-component.ts"],"sourcesContent":["/**\n * Models different kinds of messages.\n *\n * Note that we on purpose use lowercase letters to \n * be consistent with the bootstrap alert types (Particularly \n * from ngx-bootstrap library). By doing so, we may directly \n * transform this alert type into the bootstrap one.\n */\nexport enum AlertTypeEnum {\n    none = 0,\n    info = 1,\n    warning = 2,\n    success = 3,\n    danger = 4,\n    other = 5\n}\n\nexport interface IHasAlertInfo {\n    alertMessage: string;\n    alertSubMessage: string;\n    alertType: AlertTypeEnum;\n    alertDismissible: boolean;\n}    \n","/**\n * Models the submission state of a request.\n */\nexport enum SubmissionStateEnum {\n    None = 0,\n    Processing = 1,\n    Success = 2,\n    Failure = 3,\n    Other = 4\n}\n\nexport interface IHasSubmissionState {\n    submissionState: SubmissionStateEnum;\n}    \n","import { Input, Output, EventEmitter, Directive } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IHasNotifications } from '../interfaces/has-notifications.interface';\r\n\r\n\r\n/**\r\n * Models the inputs for the default reusable form.\r\n */\r\nexport interface IDefaultFormInputs {\r\n    hideCancelBtn?: boolean;\r\n    hideSubmitBtn?: boolean;\r\n    submitBtnTxt?: string;\r\n    cancelBtnTxt?: string;\r\n}\r\n\r\n/**\r\n * Provides a base for defining a reusable form. \r\n */\r\n@Directive()\r\nexport abstract class DefaultFormBaseComponent implements IHasNotifications {\r\n\r\n    isSaving: boolean;\r\n\r\n    abstract readonly form: FormGroup;\r\n\r\n    @Input()\r\n    hideCancelBtn: boolean = false;\r\n    @Input()\r\n    hideSubmitBtn: boolean = false;\r\n    @Input()\r\n    submitBtnTxt: string = 'Submit';\r\n    @Input()\r\n    cancelBtnTxt: string = 'Cancel';\r\n\r\n    @Output()\r\n    readonly onSave = new EventEmitter();\r\n    @Output()\r\n    readonly onCancel = new EventEmitter();\r\n    @Output()\r\n    readonly onValueChanged = new EventEmitter();\r\n    @Output()\r\n    readonly onValidation = new EventEmitter();\r\n\r\n    public notifyValidation() {\r\n        this.onValidation.emit({\r\n            valid: this.form.valid\r\n        });\r\n    }\r\n\r\n    public notifyValueChanges(a: any) {\r\n        this.onValueChanged.emit(a);\r\n    }\r\n}\r\n"],"names":["AlertTypeEnum","SubmissionStateEnum","EventEmitter","Directive","Input","Output"],"mappings":";;;;;;IAAA;;;;;;;;;IAQA,WAAY,aAAa;QACrB,iDAAQ,CAAA;QACR,iDAAQ,CAAA;QACR,uDAAW,CAAA;QACX,uDAAW,CAAA;QACX,qDAAU,CAAA;QACV,mDAAS,CAAA;IACb,CAAC,EAPWA,qBAAa,KAAbA,qBAAa;;ICRzB;;;;IAGA,WAAY,mBAAmB;QAC3B,6DAAQ,CAAA;QACR,yEAAc,CAAA;QACd,mEAAW,CAAA;QACX,mEAAW,CAAA;QACX,+DAAS,CAAA;IACb,CAAC,EANWC,2BAAmB,KAAnBA,2BAAmB;;ICY/B;;;;QAGA;YAQI,kBAAa,GAAY,KAAK,CAAC;YAE/B,kBAAa,GAAY,KAAK,CAAC;YAE/B,iBAAY,GAAW,QAAQ,CAAC;YAEhC,iBAAY,GAAW,QAAQ,CAAC;YAGvB,WAAM,GAAG,IAAIC,iBAAY,EAAE,CAAC;YAE5B,aAAQ,GAAG,IAAIA,iBAAY,EAAE,CAAC;YAE9B,mBAAc,GAAG,IAAIA,iBAAY,EAAE,CAAC;YAEpC,iBAAY,GAAG,IAAIA,iBAAY,EAAE,CAAC;SAW9C;QATU,mDAAgB,GAAvB;YACI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;aACzB,CAAC,CAAC;SACN;QAEM,qDAAkB,GAAzB,UAA0B,CAAM;YAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC/B;wGAhCiB,wBAAwB;uEAAxB,wBAAwB;uCAnB9C;KAkBA,IAkCC;wDAjCqB,wBAAwB;kBAD7CC,cAAS;;sBAOLC,UAAK;;sBAELA,UAAK;;sBAELA,UAAK;;sBAELA,UAAK;;sBAGLC,WAAM;;sBAENA,WAAM;;sBAENA,WAAM;;sBAENA,WAAM;;;;;;;;;;;;;"}