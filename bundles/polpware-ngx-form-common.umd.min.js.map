{"version":3,"sources":["ng://@polpware/ngx-form-common/lib/interfaces/has-alert-info.interface.ts","ng://@polpware/ngx-form-common/lib/interfaces/has-submission-state.interface.ts","ng://@polpware/ngx-form-common/lib/bases/default-form-base-component.ts"],"names":["AlertTypeEnum","SubmissionStateEnum","DefaultFormBaseComponent","this","hideCancelBtn","hideSubmitBtn","submitBtnTxt","cancelBtnTxt","onSave","EventEmitter","onCancel","onValueChanged","onValidation","prototype","notifyValidation","emit","valid","form","notifyValueChanges","a","inputs","outputs"],"mappings":"sUAQA,IAAYA,ECLAC,GDKAD,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACrBA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,MAAA,GAAA,SCXQC,EAAAA,EAAAA,sBAAAA,EAAAA,oBAAmB,KAC3BA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,yBCUJ,SAAAC,IAQIC,KAAAC,eAAyB,EAEzBD,KAAAE,eAAyB,EAEzBF,KAAAG,aAAuB,SAEvBH,KAAAI,aAAuB,SAGdJ,KAAAK,OAAS,IAAIC,EAAAA,aAEbN,KAAAO,SAAW,IAAID,EAAAA,aAEfN,KAAAQ,eAAiB,IAAIF,EAAAA,aAErBN,KAAAS,aAAe,IAAIH,EAAAA,oBAErBP,EAAAW,UAAAC,iBAAP,WACIX,KAAKS,aAAaG,KAAK,CACnBC,MAAOb,KAAKc,KAAKD,SAIlBd,EAAAW,UAAAK,mBAAP,SAA0BC,GACtBhB,KAAKQ,eAAeI,KAAKI,qCA/BXjB,qCAAAA,EAAwBkB,OAAA,CAAAhB,cAAA,gBAAAC,cAAA,gBAAAC,aAAA,eAAAC,aAAA,gBAAAc,QAAA,CAAAb,OAAA,SAAAE,SAAA,WAAAC,eAAA,iBAAAC,aAAA","sourcesContent":["/**\n * Models different kinds of messages.\n *\n * Note that we on purpose use lowercase letters to \n * be consistent with the bootstrap alert types (Particularly \n * from ngx-bootstrap library). By doing so, we may directly \n * transform this alert type into the bootstrap one.\n */\nexport enum AlertTypeEnum {\n    none = 0,\n    info = 1,\n    warning = 2,\n    success = 3,\n    danger = 4,\n    other = 5\n}\n\nexport interface IHasAlertInfo {\n    alertMessage: string;\n    alertSubMessage: string;\n    alertType: AlertTypeEnum;\n    alertDismissible: boolean;\n}    \n","/**\n * Models the submission state of a request.\n */\nexport enum SubmissionStateEnum {\n    None = 0,\n    Processing = 1,\n    Success = 2,\n    Failure = 3,\n    Other = 4\n}\n\nexport interface IHasSubmissionState {\n    submissionState: SubmissionStateEnum;\n}    \n","import { Input, Output, EventEmitter, Directive } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IHasNotifications } from '../interfaces/has-notifications.interface';\r\n\r\n\r\n/**\r\n * Models the inputs for the default reusable form.\r\n */\r\nexport interface IDefaultFormInputs {\r\n    hideCancelBtn?: boolean;\r\n    hideSubmitBtn?: boolean;\r\n    submitBtnTxt?: string;\r\n    cancelBtnTxt?: string;\r\n}\r\n\r\n/**\r\n * Provides a base for defining a reusable form. \r\n */\r\n@Directive()\r\nexport abstract class DefaultFormBaseComponent implements IHasNotifications {\r\n\r\n    isSaving: boolean;\r\n\r\n    abstract readonly form: FormGroup;\r\n\r\n    @Input()\r\n    hideCancelBtn: boolean = false;\r\n    @Input()\r\n    hideSubmitBtn: boolean = false;\r\n    @Input()\r\n    submitBtnTxt: string = 'Submit';\r\n    @Input()\r\n    cancelBtnTxt: string = 'Cancel';\r\n\r\n    @Output()\r\n    readonly onSave = new EventEmitter();\r\n    @Output()\r\n    readonly onCancel = new EventEmitter();\r\n    @Output()\r\n    readonly onValueChanged = new EventEmitter();\r\n    @Output()\r\n    readonly onValidation = new EventEmitter();\r\n\r\n    public notifyValidation() {\r\n        this.onValidation.emit({\r\n            valid: this.form.valid\r\n        });\r\n    }\r\n\r\n    public notifyValueChanges(a: any) {\r\n        this.onValueChanged.emit(a);\r\n    }\r\n}\r\n"]}